{"version":3,"sources":["PhoneNumberView.js","PhoneNumbersView.js","ContactView.js","ContactsView.js","AlertView.js","MedicalAlertsView.js","DataView.js","Login.js","LoginController.js","DataController.js","App.js","serviceWorker.js","index.js"],"names":["PhoneNumberViews","name","number","className","href","role","aria-label","type","value","readOnly","PhoneNumbersViews","phoneNumbers","map","key","ContactView","address","postcode","ContactsView","emergencyContacts","c","AlertView","message","link","target","rel","aria-hidden","MedicalAlertsView","data","asthma","diabetes1","diabetes2","epilepsy","seizures","hypertension","strokeHistory","hearingLoss","alzheimers","DataView","Login","onLogin","loading","setPassword","password","errorMessage","captchaChange","valid","recaptchaRef","onSubmit","disabled","onChange","placeholder","ref","sitekey","process","onExpired","LoginController","props","state","bind","React","createRef","event","this","setState","captcha","current","reset","console","log","preventDefault","Component","DataController","loadData","requestData","fetch","method","body","JSON","stringify","then","r","json","status","catch","e","error","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb8a3acf.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport default function PhoneNumberViews({name, number}) {\n    return <div className=\"form-group\">\n        <label>{name}</label>\n        <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n                <div className=\"input-group-text\"><a href={`tel:${number}`}><span role='img' aria-label='phone'>ðŸ“ž</span></a></div>\n            </div>\n            <input type=\"text\" value={number} readOnly={true} className=\"form-control\" />\n        </div>\n        <small className=\"form-text text-muted\">\n            Click the phone icon to call\n        </small>\n    </div>\n}","import * as React from \"react\";\nimport PhoneNumberView from \"./PhoneNumberView\";\n\nexport default function PhoneNumbersViews({phoneNumbers}) {\n    return phoneNumbers.map(number => <PhoneNumberView key={number.name} {...number} />)\n}","import React from 'react';\nimport PhoneNumbersView from \"./PhoneNumbersView\";\n\nfunction ContactView({name, address, postcode, phoneNumbers}) {\n    return <div>\n        {name && <div className=\"form-group\">\n            <label>Name</label>\n            <input type=\"text\" className=\"form-control\" value={name} readOnly={true}/>\n        </div>}\n        {address && <div className=\"form-group\">\n            <label>Address</label>\n            <textarea className=\"form-control\" value={address} readOnly={true}/>\n        </div>}\n        {postcode && <div className=\"form-group\">\n            <label>Postcode</label>\n            <input type=\"text\" className=\"form-control\" value={postcode} readOnly={true}/>\n        </div>}\n        {phoneNumbers && <PhoneNumbersView phoneNumbers={phoneNumbers}/> }\n    </div>\n}\n\nexport default ContactView","import React from 'react';\nimport ContactView from \"./ContactView\";\n\nfunction ContactsView({emergencyContacts}) {\n    return <div>\n        <h3>Emergency Contacts</h3>\n        <div className='row pt-2'>\n        {emergencyContacts.map(c => <div key={c.name} className='col-6 pb-3'>\n            <div className='col card pt-3 pb-2'>\n                <ContactView {...c}/>\n            </div>\n        </div>)}\n        </div>\n    </div>\n}\n\nexport default ContactsView","import React from 'react';\n\nfunction AlertView({message, link}) {\n    return <div className='alert alert-danger'>\n        {message}\n        {link && <a href={link} target='_blank' rel='noopener noreferrer' className=\"close\" >\n            <span aria-hidden=\"true\">â“˜</span>\n        </a>}\n    </div>\n}\n\nexport default AlertView","import * as React from \"react\";\nimport AlertView from \"./AlertView\";\n\nexport default function MedicalAlertsView({data}) {\n    return <div>\n        {data.asthma && <AlertView message='I have asthma' link='https://www.nhs.uk/conditions/asthma/'/>}\n        {data.diabetes1 && <AlertView message='I have diabetes (Type 1)' link='https://www.nhs.uk/conditions/type-1-diabetes/'/>}\n        {data.diabetes2 && <AlertView message='I have diabetes (Type 2)' link='https://www.nhs.uk/conditions/type-2-diabetes/'/>}\n        {data.epilepsy && <AlertView message='I have epilepsy' link='https://www.nhs.uk/conditions/epilepsy/'/>}\n        {data.seizures && <AlertView message='I have seizures' link='https://www.nhs.uk/conditions/what-to-do-if-someone-has-a-seizure-fit/'/>}\n        {data.hypertension && <AlertView message='I have hypertension' link='https://www.nhs.uk/conditions/high-blood-pressure-hypertension/'/>}\n        {data.strokeHistory && <AlertView message='I have a stroke history' link='https://www.nhs.uk/conditions/stroke/'/>}\n        {data.hearingLoss && <AlertView message='I have hearing loss' link='https://www.nhs.uk/conditions/hearing-loss/'/>}\n        {data.alzheimers && <AlertView message=\"I have Alzheimer's\" link='https://www.nhs.uk/conditions/alzheimers-disease/'/>}\n    </div>\n}","import React from 'react';\nimport ContactsView from \"./ContactsView\";\nimport ContactView from \"./ContactView\";\nimport MedicalAlertsView from \"./MedicalAlertsView\";\n\nfunction DataView({data}) {\n    return <div className='container'>\n        <div className='row'>\n            <div className='col pt-3'>\n                <form>\n                    <MedicalAlertsView data={data}/>\n                    <ContactView {...data}/>\n                    { data.emergencyContacts && <ContactsView emergencyContacts={data.emergencyContacts}/>}\n                </form>\n            </div>\n        </div>\n\n    </div>\n}\n\nexport default DataView","import React from 'react';\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\nfunction Login({onLogin, loading, setPassword, password, errorMessage, captchaChange, valid, recaptchaRef}) {\n\n    return <div className='container-fluid'>\n        <div className='row justify-content-md-center pt-5 text-center'>\n            <div className='col-sm col-md-6 col-lg-4 col-xl-3'>\n                <form onSubmit={onLogin}>\n                    {errorMessage && <div className=\"alert alert-danger\" role=\"alert\">{errorMessage}</div>}\n                    <div className=\"form-group\">\n                        <input type='password' className='form-control form-control-lg' disabled={loading}\n                               onChange={setPassword}\n                               value={password} placeholder='Password'/>\n                    </div>\n                    <div className=\"form-group\">\n                        <ReCAPTCHA\n                            ref={recaptchaRef}\n                            sitekey={process.env.REACT_APP_CAPTCHA_SITE_KEY}\n                            onChange={captchaChange}\n                            onExpired={() => {\n                                captchaChange()\n                            }}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <input type='submit' className='btn btn-success btn-lg' disabled={!valid} value='Login'/>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n}\n\nexport default Login","import React from 'react';\nimport Login from \"./Login\";\n\n\nclass LoginController extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            password: \"\"\n        }\n        this.setPassword = this.setPassword.bind(this);\n        this.onLogin = this.onLogin.bind(this);\n        this.captchaChange = this.captchaChange.bind(this);\n        this.recaptchaRef = React.createRef();\n    }\n\n    setPassword(event) {\n        this.setState({password: event.target.value});\n    }\n\n    onLogin(event) {\n        if (this.valid()) {\n            this.props.onLogin({password: this.state.password, captcha: this.state.captcha})\n            this.recaptchaRef.current.reset()\n            this.setState({captcha:''})\n        } else {\n            console.log(this.state)\n        }\n        event.preventDefault();\n    }\n\n    captchaChange(captcha) {\n        this.setState({captcha})\n    }\n\n    valid() {\n        return !!this.state.captcha & !!this.state.password;\n    }\n\n    render() {\n        const {password} = this.state;\n        const valid = this.valid();\n        return <Login password={password} setPassword={this.setPassword} {...this.props} onLogin={this.onLogin}\n                      captchaChange={this.captchaChange} valid={valid} recaptchaRef={this.recaptchaRef}/>\n    }\n}\n\nexport default LoginController","import React from 'react';\nimport DataView from \"./DataView\";\nimport LoginController from \"./LoginController\";\n\nclass DataController extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {data: null};\n        this.loadData = this.loadData.bind(this);\n    }\n\n    loadData(requestData) {\n        this.setState({loading:true});\n        fetch(process.env.REACT_APP_DATA_URL, {method: 'POST', body: JSON.stringify(requestData)})\n            .then(r=>{\n                return r.json().then(data=>{\n\n                    if(r.status ===200){\n                        this.setState({data, loading: false});\n                    }else {\n                        this.setState({errorMessage: data.message, loading: false});\n                    }\n                })\n            })\n            .catch(e=>{\n                console.error(e);\n                this.setState({errorMessage: \"Unknown error\"})\n            });\n    }\n\n    render() {\n        const {data, loading, errorMessage} = this.state;\n        return <div>\n            {data == null && <LoginController onLogin={this.loadData} loading={loading} errorMessage={errorMessage}/>}\n            {data != null && <DataView data={data}/>}\n        </div>\n    }\n\n}\n\nexport default DataController","import React from 'react';\nimport DataController from \"./DataController\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <DataController/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}