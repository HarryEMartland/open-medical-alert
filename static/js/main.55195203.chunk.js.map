{"version":3,"sources":["DataView.js","Login.js","LoginController.js","DataController.js","App.js","serviceWorker.js","index.js"],"names":["DataView","data","className","name","type","value","disabled","address","postcode","Login","onLogin","loading","setPassword","password","errorMessage","captchaChange","valid","onSubmit","role","onChange","placeholder","sitekey","process","onExpired","LoginController","state","bind","event","this","setState","target","props","captcha","console","log","preventDefault","React","Component","DataController","loadData","requestData","fetch","REACT_APP_DATA_URL","method","body","JSON","stringify","then","r","json","status","message","catch","e","error","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOA0BeA,MAxBf,YAA2B,IAARC,EAAO,EAAPA,KACf,OAAO,yBAAKC,UAAU,aAClB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,8BACKD,EAAKE,MAAQ,yBAAKD,UAAU,cACzB,uCACA,2BAAOE,KAAK,OAAOF,UAAU,eAAgBG,MAAOJ,EAAKE,KAAMG,UAAQ,KAE1EL,EAAKM,SAAW,yBAAKL,UAAU,cAC5B,0CACA,8BAAUE,KAAK,OAAOF,UAAU,eAAgBG,MAAOJ,EAAKM,QAASD,UAAQ,KAEhFL,EAAKO,UAAY,yBAAKN,UAAU,cAC7B,2CACA,2BAAOE,KAAK,OAAOF,UAAU,eAAgBG,MAAOJ,EAAKO,SAAUF,UAAQ,U,QCcpFG,MA3Bf,YAA+F,IAA/EC,EAA8E,EAA9EA,QAASC,EAAqE,EAArEA,QAASC,EAA4D,EAA5DA,YAAaC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,cAAeC,EAAQ,EAARA,MAElF,OAAO,yBAAKd,UAAU,mBAClB,yBAAKA,UAAU,kDACX,yBAAKA,UAAU,qCACX,0BAAMe,SAAUP,GACXI,GAAgB,yBAAKZ,UAAU,qBAAqBgB,KAAK,SAASJ,GACnE,yBAAKZ,UAAU,cACX,2BAAOE,KAAK,WAAWF,UAAU,+BAA+BI,SAAUK,EAASQ,SAAUP,EACtFP,MAAOQ,EAAUO,YAAY,cAExC,yBAAKlB,UAAU,cACX,kBAAC,IAAD,CACImB,QAASC,2CACTH,SAAUJ,EACVQ,UAAW,WAAKR,QAGxB,yBAAKb,UAAU,cACX,2BAAOE,KAAK,SAASF,UAAU,yBAAyBI,UAAWU,EAAOX,MAAM,gBCoBzFmB,E,kDAtCX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTZ,SAAU,IAEd,EAAKD,YAAc,EAAKA,YAAYc,KAAjB,gBACnB,EAAKhB,QAAU,EAAKA,QAAQgB,KAAb,gBACf,EAAKX,cAAgB,EAAKA,cAAcW,KAAnB,gBAPX,E,wDAUFC,GACRC,KAAKC,SAAS,CAAChB,SAAUc,EAAMG,OAAOzB,U,8BAGlCsB,GACDC,KAAKZ,QACJY,KAAKG,MAAMrB,QAAQ,CAACG,SAAUe,KAAKH,MAAMZ,SAAUmB,QAASJ,KAAKH,MAAMO,UAEvEC,QAAQC,IAAIN,KAAKH,OAErBE,EAAMQ,mB,oCAGIH,GACVJ,KAAKC,SAAS,CAACG,c,8BAIf,QAASJ,KAAKH,MAAMO,UAAYJ,KAAKH,MAAMZ,W,+BAGrC,IACCA,EAAYe,KAAKH,MAAjBZ,SACDG,EAAQY,KAAKZ,QACnB,OAAO,kBAAC,EAAD,eAAOH,SAAUA,EAAUD,YAAagB,KAAKhB,aAAiBgB,KAAKG,MAAnE,CAA0ErB,QAASkB,KAAKlB,QAASK,cAAea,KAAKb,cAAeC,MAAOA,S,GApC5HoB,IAAMC,WCsCrBC,E,kDAnCX,aAAe,IAAD,8BACV,gBACKb,MAAQ,CAACxB,KAAM,MACpB,EAAKsC,SAAW,EAAKA,SAASb,KAAd,gBAHN,E,qDAMLc,GAAc,IAAD,OAClBZ,KAAKC,SAAS,CAAClB,SAAQ,IACvB8B,MAAMnB,4MAAYoB,mBAAoB,CAACC,OAAQ,OAAQC,KAAMC,KAAKC,UAAUN,KACvEO,MAAK,SAAAC,GACF,OAAOA,EAAEC,OAAOF,MAAK,SAAA9C,GAEF,MAAZ+C,EAAEE,OACD,EAAKrB,SAAS,CAAC5B,OAAMU,SAAS,IAE9B,EAAKkB,SAAS,CAACf,aAAcb,EAAKkD,QAASxC,SAAS,UAI/DyC,OAAM,SAAAC,GACHpB,QAAQqB,MAAMD,GACd,EAAKxB,SAAS,CAACf,aAAc,uB,+BAI/B,IAAD,EACiCc,KAAKH,MAApCxB,EADF,EACEA,KAAMU,EADR,EACQA,QAASG,EADjB,EACiBA,aACtB,OAAO,6BACM,MAARb,GAAgB,kBAAC,EAAD,CAAiBS,QAASkB,KAAKW,SAAU5B,QAASA,EAASG,aAAcA,IACjF,MAARb,GAAgB,kBAAC,EAAD,CAAUA,KAAMA,S,GA/BhBmC,IAAMC,WCOpBkB,MARf,WACE,OACE,yBAAKrD,UAAU,OACX,kBAAC,EAAD,QCMYsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAE,GACLrB,QAAQqB,MAAMA,EAAMH,c","file":"static/js/main.55195203.chunk.js","sourcesContent":["import React from 'react';\n\nfunction DataView({data}) {\n    return <div className='container'>\n        <div className='row'>\n            <div className='col pt-3'>\n                <form>\n                    {data.name && <div className=\"form-group\">\n                        <label >Name</label>\n                        <input type=\"text\" className=\"form-control\"  value={data.name} disabled/>\n                    </div>}\n                    {data.address && <div className=\"form-group\">\n                        <label >Address</label>\n                        <textarea type=\"text\" className=\"form-control\"  value={data.address} disabled/>\n                    </div>}\n                    {data.postcode && <div className=\"form-group\">\n                        <label >Postcode</label>\n                        <input type=\"text\" className=\"form-control\"  value={data.postcode} disabled/>\n                    </div>}\n                </form>\n            </div>\n        </div>\n\n    </div>\n}\n\nexport default DataView","import React from 'react';\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\n\nfunction Login({onLogin, loading, setPassword, password, errorMessage, captchaChange, valid}) {\n\n    return <div className='container-fluid'>\n        <div className='row justify-content-md-center pt-5 text-center'>\n            <div className='col-sm col-md-6 col-lg-4 col-xl-3'>\n                <form onSubmit={onLogin} >\n                    {errorMessage && <div className=\"alert alert-danger\" role=\"alert\">{errorMessage}</div>}\n                    <div className=\"form-group\">\n                        <input type='password' className='form-control form-control-lg' disabled={loading} onChange={setPassword}\n                               value={password} placeholder='Password'/>\n                    </div>\n                    <div className=\"form-group\">\n                        <ReCAPTCHA\n                            sitekey={process.env.REACT_APP_CAPTCHA_SITE_KEY}\n                            onChange={captchaChange}\n                            onExpired={()=>{captchaChange()}}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <input type='submit' className='btn btn-success btn-lg' disabled={!valid} value='Login'/>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n}\n\nexport default Login","import React from 'react';\nimport Login from \"./Login\";\n\nclass LoginController extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            password: \"\"\n        }\n        this.setPassword = this.setPassword.bind(this);\n        this.onLogin = this.onLogin.bind(this);\n        this.captchaChange = this.captchaChange.bind(this);\n    }\n\n    setPassword(event) {\n        this.setState({password: event.target.value});\n    }\n\n    onLogin(event) {\n        if(this.valid()) {\n            this.props.onLogin({password: this.state.password, captcha: this.state.captcha})\n        }else {\n            console.log(this.state)\n        }\n        event.preventDefault();\n    }\n\n    captchaChange(captcha) {\n        this.setState({captcha})\n    }\n\n    valid(){\n        return !!this.state.captcha & !!this.state.password;\n    }\n\n    render() {\n        const {password} = this.state;\n        const valid = this.valid();\n        return <Login password={password} setPassword={this.setPassword} {...this.props} onLogin={this.onLogin} captchaChange={this.captchaChange} valid={valid}/>\n    }\n}\n\nexport default LoginController","import React from 'react';\nimport DataView from \"./DataView\";\nimport LoginController from \"./LoginController\";\n\nclass DataController extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {data: null};\n        this.loadData = this.loadData.bind(this);\n    }\n\n    loadData(requestData) {\n        this.setState({loading:true});\n        fetch(process.env.REACT_APP_DATA_URL, {method: 'POST', body: JSON.stringify(requestData)})\n            .then(r=>{\n                return r.json().then(data=>{\n\n                    if(r.status ===200){\n                        this.setState({data, loading: false});\n                    }else {\n                        this.setState({errorMessage: data.message, loading: false});\n                    }\n                })\n            })\n            .catch(e=>{\n                console.error(e);\n                this.setState({errorMessage: \"Unknown error\"})\n            });\n    }\n\n    render() {\n        const {data, loading, errorMessage} = this.state;\n        return <div>\n            {data == null && <LoginController onLogin={this.loadData} loading={loading} errorMessage={errorMessage}/>}\n            {data != null && <DataView data={data}/>}\n        </div>\n    }\n\n}\n\nexport default DataController","import React from 'react';\nimport DataController from \"./DataController\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <DataController/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}